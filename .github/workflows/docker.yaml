name: Build and push ckan-pycsw image

on:
  pull_request:
    types:
        - closed
    branches:
        - main
        - 'ckan-pycsw-*.*.*'
        - '!dev/ckan-pycsw-*.*.*'
        - '!feature/*'
        - '!fix/*'
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag (leave empty for branch name)'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTEXT: .
  DOCKERFILE_PATH: /ckan-pycsw
  DOCKERFILE: Dockerfile

jobs:
  docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    # Run on PR merge, release, or manual trigger
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      github.event_name == 'release' ||
      github.event_name == 'workflow_dispatch'

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check out code
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Extract version from release tag
            # Supports: v2.6.1, ckan-pycsw-2.6.1, 2.6.1
            VERSION=$(echo "${{ github.event.release.tag_name }}" | sed -E 's/^(v|ckan-pycsw-)?([0-9]+\.[0-9]+\.[0-9]+.*)$/\2/')
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
            echo "Extracted version: ${VERSION}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
            # Manual workflow with custom tag
            VERSION="${{ github.event.inputs.tag }}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "Manual tag: ${VERSION}"
          else
            # PR merge - use branch name
            BRANCH="${{ github.head_ref }}"
            VERSION="${BRANCH////_}"
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
            echo "Branch version: ${VERSION}"
          fi

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/README.md
            org.opencontainers.image.version=${{ steps.version.outputs.version }}

      - name: Generate Docker tags
        id: tags
        run: |
          TAGS=""
          VERSION="${{ steps.version.outputs.version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          
          if [ "${{ steps.version.outputs.is_release }}" = "true" ]; then
            # Release: create version tag and update latest
            TAGS="${IMAGE}:${VERSION},${IMAGE}:latest"
            echo "Release tags: ${TAGS}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual: only the specified tag
            TAGS="${IMAGE}:${VERSION}"
            echo "Manual tag: ${TAGS}"
          else
            # PR merge: branch name tag and main/latest if merging to main
            TAGS="${IMAGE}:${VERSION}"
            if [ "${{ github.event.pull_request.base.ref }}" = "main" ]; then
              TAGS="${TAGS},${IMAGE}:main,${IMAGE}:latest"
            fi
            echo "PR merge tags: ${TAGS}"
          fi
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          context: ${{ env.CONTEXT }}
          file: ${{ env.CONTEXT }}${{ env.DOCKERFILE_PATH }}/${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Linting Dockerfile with hadolint in GH Actions
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.CONTEXT }}${{ env.DOCKERFILE_PATH }}/${{ env.DOCKERFILE }}
          no-fail: true

      - name: Run Trivy container image vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          format: sarif
          output: trivy-results.sarif
  
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
